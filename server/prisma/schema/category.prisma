enum CategoryStatus {
    ACTIVE
    INACTIVE
    DELETED
}

type CategoryImage {
    thumbnail String
    banner    String?
    featured  String?
    gallery   String[]
}

// Category model with hierarchical structure
model Category {
    id               String         @id @default(auto()) @map("_id") @db.ObjectId
    name             String
    slug             String         @unique
    description      String?
    image            CategoryImage
    parentId         String?        @db.ObjectId
    parent           Category?      @relation("CategoryToSubcategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children         Category[]     @relation("CategoryToSubcategory")
    isFeatured       Boolean        @default(false) // Is this category featured on the homepage or in promotions?
    isShowOnHomePage Boolean        @default(false) // Should its products be shown on the homepage?
    status           CategoryStatus @default(ACTIVE) // Status of the category (active, inactive, deleted)

    // Attributes specific to this category
    attributes CategoryAttribute[]

    // Products in this category
    products Product[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime? // Soft delete

    @@unique([name, slug])
}

// Attribute definition model
model Attribute {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    code        String        @unique // A unique code like "color", "size", "material"
    description String?
    type        AttributeType
    unit        String? // e.g., "kg", "cm", "MHz"

    // For enum type attributes, store possible values
    options Json? // e.g., ["S", "M", "L", "XL"] for size

    // Categories that use this attribute
    categories CategoryAttribute[]

    // Product attribute values
    values ProductAttributeValue[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Enum for attribute types
enum AttributeType {
    STRING
    NUMBER
    BOOLEAN
    DATE
    ENUM
    RANGE
}

// Junction model between Category and Attribute with additional properties
model CategoryAttribute {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    categoryId  String @db.ObjectId
    attributeId String @db.ObjectId

    // The category this attribute belongs to
    category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    // The attribute definition
    attribute Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

    // Is this attribute filterable?
    filterable Boolean @default(true)

    // Is this attribute required for products in this category?
    required Boolean @default(false)

    // Display order in filters
    displayOrder Int @default(0)

    // Filter UI type (slider, checkbox, radio, etc.)
    filterType FilterType @default(CHECKBOX)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([categoryId, attributeId])
}

// Enum for filter UI types
enum FilterType {
    CHECKBOX
    RADIO
    SLIDER
    RANGE
    COLOR_PICKER
    DROPDOWN
}

// Product attribute values
model ProductAttributeValue {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    productId   String? @db.ObjectId
    attributeId String  @db.ObjectId
    variantId   String? @db.ObjectId // Optional variant ID for product variants

    // The product this value belongs to
    product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

    // The attribute this value is for
    attribute Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

    // The variant this value belongs to (if applicable)
    variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

    // The actual value, stored as JSON to support different types
    value Json

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([productId, attributeId])
}
